Stock Buy and Sell - Multiple Transaction Allowed

Given an array prices[] of size n denoting the cost of stock on each day, the task is to find the maximum total profit if we can buy and sell the stocks any number of times.

Note: We can only sell a stock which we have bought earlier and we cannot hold multiple stocks on any day.

Examples:

Input: prices[] = {100, 180, 260, 310, 40, 535, 695}
Output: 865
Explanation: Buy the stock on day 0 and sell it on day 3 => 310 - 100 = 210
Buy the stock on day 4 and sell it on day 6 => 695 - 40 = 655
Maximum Profit = 210 + 655 = 865

[caption width="800"]Maximize-Profit--Graph[/caption]
Input: prices[] = {4, 2, 2, 2, 4}
Output: 2
Explanation: Buy the stock on day 3 and sell it on day 4 => 4 - 2 = 2
Maximum Profit = 2

Table of Content

[Naive Approach] Using Recursion - Exponential Time
[Better Approach] Local Minima and Maxima - O(n) Time and O(1) Space
[Expected Approach] Accumulate Profit - O(n) Time and O(1) Space
[Naive Approach] Using Recursion - Exponential Time
We consider every valid pair (A pair of indexes i and j such that price[i] < price[j] and j > i), we get the profit of the pair as (price[j] - price[i]) and add recursively compute profits for i-1 and j+1. Finally we return the maximum of all profits obtained by all valid pairs.

Output
865
Time Complexity: O(n)
Auxiliary Space: O(1)
