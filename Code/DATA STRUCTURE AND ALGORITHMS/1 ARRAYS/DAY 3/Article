Rotate an Array by d - Counterclockwise or Left

Given an array of integers arr[] of size n, the task is to rotate the array elements to the left by d positions.

Examples:

Input: arr[] = {1, 2, 3, 4, 5, 6}, d = 2
Output: {3, 4, 5, 6, 1, 2}
Explanation: After first left rotation, arr[] becomes {2, 3, 4, 5, 6, 1} and after the second rotation, arr[] becomes {3, 4, 5, 6, 1, 2}

Input: arr[] = {1, 2, 3}, d = 4
Output: {2, 3, 1}
Explanation: The array is rotated as follows:

After first left rotation, arr[] = {2, 3, 1}
After second left rotation, arr[] = {3, 1, 2}
After third left rotation, arr[] = {1, 2, 3}
After fourth left rotation, arr[] = {2, 3, 1}
Table of Content

[Naive Approach] Rotate one by one - O(n * d) Time and O(1) Space
[Better Approach] Using Temporary Array - O(n) Time and O(n) Space
[Expected Approach 1] Using Juggling Algorithm - O(n) Time and O(1) Space
[Expected Approach 2] Using Reversal Algorithm - O(n) Time and O(1) Space
[Naive Approach] Rotate one by one - O(n * d) Time and O(1) Space
In each iteration, shift the elements by one position to the left in a circular fashion (the first element becomes the last). Perform this operation d times to rotate the elements to the left by d positions.

Illustration:

Let us take arr[] = {1, 2, 3, 4, 5, 6}, d = 2.

First Step:
        => Rotate to left by one position.
        => arr[] = {2, 3, 4, 5, 6, 1}
Second Step:
        => Rotate again to left by one position
        => arr[] = {3, 4, 5, 6, 1, 2}
Rotation is done 2 times.
So the array becomes arr[] = {3, 4, 5, 6, 1, 2}

Output
3 4 5 6 1 2 
Time complexity: O(n), as we are visiting each element exactly twice.
Auxiliary Space: O(1)