**Maximum Product Subarray**

**Problem:**

Given an array `arr[]` that contains positive and negative integers (may contain 0 as well), find the maximum product that can be obtained from any subarray of `arr`.

**Note:**

- It is guaranteed that the output will fit in a 32-bit integer.

**Examples:**

**Input 1:**

```
arr[] = [-2, 6, -3, -10, 0, 2]
```

**Output 1:**

```
180
```

**Explanation:** The subarray with the maximum product is `{6, -3, -10}` with product `6 * (-3) * (-10) = 180`.

---

**Input 2:**

```
arr[] = [-1, -3, -10, 0, 60]
```

**Output 2:**

```
60
```

**Explanation:** The subarray with the maximum product is `{60}`.

---

**Input 3:**

```
arr[] = [2, 3, 4]
```

**Output 3:**

```
24
```

**Explanation:** For an array with all positive elements, the result is the product of all elements: `2 * 3 * 4 = 24`.

---

**Constraints:**

- `1 ≤ arr.size() ≤ 10^6`
- `-10 ≤ arr[i] ≤ 10`

**Task:**

Implement a function to find the maximum product subarray in `O(n)` time complexity and `O(1)` space complexity.
