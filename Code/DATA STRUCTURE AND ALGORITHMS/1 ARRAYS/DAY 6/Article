Majority Element II - Elements occurring more than ⌊N/3⌋ times

Given an array arr[] consisting of n integers, the task is to find all the array elements which occurs more than floor(n/3) times.
Note: The returned array of majority elements should be sorted.

Examples:

Input: arr[] = {2, 2, 3, 1, 3, 2, 1, 1}
Output: {1, 2}
Explanation: The frequency of 1 and 2 is 3, which is more than floor n/3 (8/3 = 2).

Input: arr[] = {-5, 3, -5}
Output: {-5}
Explanation: The frequency of -5 is 2, which is more than floor n/3 (3/3 = 1).

Input: arr[] = {3, 2, 2, 4, 1, 4}
Output: { }
Explanation: There is no majority element.

Table of Content

[Naive Approach] Using Nested Loops - O(n^2) Time and O(1) Space
[Better Approach] Using Hash Map or Dictionary - O(n) Time and O(n) Space
[Expected Approach] Boyer-Moore’s Voting Algorithm - O(n) Time and O(1) Space
[Naive Approach] Using Nested Loops - O(n^2) Time and O(1) Space
The idea is to iterate over all elements and count the frequency of the element in the array. If the frequency of the element is greater than floor(n/3), add it to the result. To avoid adding duplicate elements into the result, we can check if the element is already present in the result. We can stop the iteration if we have already found two majority elements.



