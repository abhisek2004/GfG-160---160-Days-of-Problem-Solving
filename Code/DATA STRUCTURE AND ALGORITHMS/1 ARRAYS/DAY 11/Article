Maximum Product Subarray

Given an integer array, the task is to find the maximum product of any subarray.

Examples:

Input: arr[] = {-2, 6, -3, -10, 0, 2}
Output: 180
Explanation: The subarray with maximum product is {6, -3, -10} with product = 6 * (-3) * (-10) = 180

Input: arr[] = {-1, -3, -10, 0, 60}
Output: 60
Explanation: The subarray with maximum product is {60}.

Table of Content

[Naive Approach] By using two nested loops – O(n^2) Time and O(1) Space
[Expected Approach 1] Using minimum and maximum product ending at any index - O(n) Time and O(1) Space
[Expected Approach 2] By traversing in both directions - O(n) Time and O(1) Space
[Naive Approach] By using two nested loops – O(n^2) Time and O(1) Space
The idea is to traverse over every contiguous subarray, find the product of each of these subarrays and return the maximum product among all the subarrays.

Complexity Analysis:

Time Complexity: O(n), where n is the size of input array.
Auxiliary Space: O(1)