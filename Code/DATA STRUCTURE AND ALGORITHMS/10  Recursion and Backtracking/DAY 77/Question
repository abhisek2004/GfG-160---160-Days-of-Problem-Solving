### **Solve the Sudoku**

**Difficulty:** Hard  
**Accuracy:** 37.98%  
**Submissions:** 106K+  
**Points:** 8

---

### **Problem Statement:**

Given a **partially filled** `9 Ã— 9` **Sudoku grid**, represented as a **2D integer matrix** `mat[][]`, solve the Sudoku by filling in the empty cells (represented as `0`).

A valid **Sudoku solution** must satisfy:

1. Each **row** contains digits **1-9** exactly **once**.
2. Each **column** contains digits **1-9** exactly **once**.
3. Each **3 Ã— 3 subgrid** contains digits **1-9** exactly **once**.

âš  **Guaranteed:** The input Sudoku **always has exactly one solution**.

---

### **Example:**

#### **Input:**

```
mat[][] =
[[5, 3, 0, 0, 7, 0, 0, 0, 0],
 [6, 0, 0, 1, 9, 5, 0, 0, 0],
 [0, 9, 8, 0, 0, 0, 0, 6, 0],
 [8, 0, 0, 0, 6, 0, 0, 0, 3],
 [4, 0, 0, 8, 0, 3, 0, 0, 1],
 [7, 0, 0, 0, 2, 0, 0, 0, 6],
 [0, 6, 0, 0, 0, 0, 2, 8, 0],
 [0, 0, 0, 4, 1, 9, 0, 0, 5],
 [0, 0, 0, 0, 8, 0, 0, 7, 9]]
```

#### **Output:**

```
[[5, 3, 4, 6, 7, 8, 9, 1, 2],
 [6, 7, 2, 1, 9, 5, 3, 4, 8],
 [1, 9, 8, 3, 4, 2, 5, 6, 7],
 [8, 5, 9, 7, 6, 1, 4, 2, 3],
 [4, 2, 6, 8, 5, 3, 7, 9, 1],
 [7, 1, 3, 9, 2, 4, 8, 5, 6],
 [9, 6, 1, 5, 3, 7, 2, 8, 4],
 [2, 8, 7, 4, 1, 9, 6, 3, 5],
 [3, 4, 5, 2, 8, 6, 1, 7, 9]]
```

---

### **Constraints:**

- `mat.size() = 9`
- `mat[i].size() = 9`
- `0 â‰¤ mat[i][j] â‰¤ 9`

---

## **Approach: Backtracking (Recursion + Pruning)**

Since `9 Ã— 9 = 81` cells is a small search space, we can use **Backtracking** efficiently.

### **Algorithm:**

1. **Find the first empty cell (`0`).**
2. **Try placing numbers `1-9` and check if valid:**
   - Ensure **no duplicate** in **row**.
   - Ensure **no duplicate** in **column**.
   - Ensure **no duplicate** in **3 Ã— 3 sub-box**.
3. **If valid, place the number and recurse** for the next empty cell.
4. **If no solution is possible, backtrack** (undo last placement).
5. **If all cells are filled, print the solution.**

---

### **Efficient Checking using Sets**

- **Use a set** to track numbers in each **row, column, and 3Ã—3 box**.
- This avoids scanning the entire grid multiple times.

# Example Input

sudoku_board = [
[5, 3, 0, 0, 7, 0, 0, 0, 0],
[6, 0, 0, 1, 9, 5, 0, 0, 0],
[0, 9, 8, 0, 0, 0, 0, 6, 0],
[8, 0, 0, 0, 6, 0, 0, 0, 3],
[4, 0, 0, 8, 0, 3, 0, 0, 1],
[7, 0, 0, 0, 2, 0, 0, 0, 6],
[0, 6, 0, 0, 0, 0, 2, 8, 0],
[0, 0, 0, 4, 1, 9, 0, 0, 5],
[0, 0, 0, 0, 8, 0, 0, 7, 9]
]

# Solve the Sudoku

if solve_sudoku(sudoku_board):
print_sudoku(sudoku_board)
else:
print("No solution exists.")

```

---

## **Time Complexity Analysis**

- Worst case: **`O(9^n)`**, where `n` is the number of empty cells.
- Pruning (via `is_valid` checks) reduces it significantly.
- Works efficiently for a `9 Ã— 9` grid.

## **Space Complexity**

- **`O(1)`**, as we modify the board in-place.

---

## **Key Takeaways**

âœ… **Uses Backtracking:** Tries all possibilities while pruning invalid cases.
âœ… **Optimized Validity Checks:** Avoids redundant checks for row, column, and box.
âœ… **Guaranteed to Solve:** Since input always has a unique solution.
âœ… **Efficient for `9 Ã— 9`:** Solves within milliseconds.

ðŸš€ **This method effectively solves Sudoku puzzles!**
```
