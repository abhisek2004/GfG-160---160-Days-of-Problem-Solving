### **Serialize and Deserialize a Binary Tree**

**Difficulty:** Medium  
**Accuracy:** 51.67%  
**Submissions:** 86K+  
**Points:** 4

---

### **Problem Statement:**

Serialization is the process of **storing** a tree in an array so that it can be later **restored**. Deserialization is the process of **reading** the tree back from the array.

You need to implement the following functions:

- **`serialize(root) → List[int]`**:
  - Stores the tree into an array and returns it.
- **`deSerialize(arr) → TreeNode`**:
  - Deserializes the array back into the original tree structure and returns the **root** node.

**Note:**

- Multiple nodes can have the same data.
- Node values are always **positive integers**.
- The function will be considered correct if:
  - `deSerialize(serialize(input_tree))` produces the same tree as `input_tree`.
- The **driver code will print the in-order traversal** of the tree returned by `deSerialize(serialize(input_tree))`.

---

### **Examples:**

#### **Example 1:**

**Input:**

```
root = [1, 2, 3]
```

**Output:**

```
[2, 1, 3]
```

**Explanation:**  
The tree structure:

```
    1
   / \
  2   3
```

In-order traversal after deserialization: **[2, 1, 3]**

---

#### **Example 2:**

**Input:**

```
root = [10, 20, 30, 40, 60, N, N]
```

**Output:**

```
[40, 20, 60, 10, 30]
```

**Explanation:**  
The tree structure:

```
      10
     /  \
   20    30
  /  \
40   60
```

In-order traversal after deserialization: **[40, 20, 60, 10, 30]**

---

### **Constraints:**

- `1 ≤ Number of nodes ≤ 10⁴`
- `1 ≤ Data of a node ≤ 10⁹`
