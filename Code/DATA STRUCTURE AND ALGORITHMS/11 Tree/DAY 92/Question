### **Lowest Common Ancestor in a BST**

**Difficulty:** Easy  
**Accuracy:** 65.2%  
**Submissions:** 164K+  
**Points:** 2

---

### **Problem Statement:**

Given a **Binary Search Tree (BST)** (with all values unique) and two nodes `n1` and `n2` (`n1 != n2`), find the **Lowest Common Ancestor (LCA)** of the given two nodes in the BST.

**Definition:**  
The **LCA** of `n1` and `n2` is defined as the **lowest node** in the BST that has both `n1` and `n2` as **descendants** (where a node can be a descendant of itself).

---

### **Examples:**

#### **Example 1:**

**Input:**

```
root = [5, 4, 6, 3, N, N, 7, N, N, N, 8]
n1 = 7, n2 = 8
```

**Output:**

```
7
```

**Explanation:**  
`7` is the closest node that is an ancestor of both `7` and `8`.

---

#### **Example 2:**

**Input:**

```
root = [20, 8, 22, 4, 12, N, N, N, N, 10, 14]
n1 = 8, n2 = 14
```

**Output:**

```
8
```

**Explanation:**  
`8` is the closest node that is an ancestor of both `8` and `14`.

---

#### **Example 3:**

**Input:**

```
root = [2, 1, 3]
n1 = 1, n2 = 3
```

**Output:**

```
2
```

**Explanation:**  
`2` is the closest node that is an ancestor of both `1` and `3`.

---

### **Constraints:**

- `1 ≤ Number of nodes ≤ 10⁵`
- `1 ≤ node->data ≤ 10⁵`
- `1 ≤ n1, n2 ≤ 10⁵`
