### **Pair Sum in BST**

**Difficulty:** Medium  
**Accuracy:** 44.02%  
**Submissions:** 65K+  
**Points:** 4

---

### **Problem Statement:**

Given a **Binary Search Tree (BST)** and an integer **target**, determine whether there exists a **pair of nodes** in the BST whose sum equals the given target.

---

### **Examples:**

#### **Example 1:**

**Input:**

```
root = [7, 3, 8, 2, 4, N, 9], target = 12
```

**Output:**

```
True
```

**Explanation:**  
The BST contains the pair **(8, 4)** whose sum is `8 + 4 = 12`.

---

#### **Example 2:**

**Input:**

```
root = [9, 5, 10, 2, 6, N, 12], target = 23
```

**Output:**

```
False
```

**Explanation:**  
There is **no pair** of nodes in the BST that sum up to `23`.

---

### **Constraints:**

- `1 â‰¤ Number of Nodes â‰¤ 10^5`
- `1 â‰¤ target â‰¤ 10^6`

---

### **Approach:**

#### âœ… **Approach 1: Using Inorder Traversal + Two-Pointer Technique** (Efficient)

1. Perform an **inorder traversal** of the BST to get a sorted array of elements.
2. Use the **two-pointer technique** to find if a pair sums up to `target`.
   - Start with `left = 0` and `right = len(arr) - 1`.
   - If `arr[left] + arr[right] == target`, return `True`.
   - If `arr[left] + arr[right] < target`, move `left` forward.
   - If `arr[left] + arr[right] > target`, move `right` backward.
3. If no pair is found, return `False`.

#### **Time & Space Complexity:**

- **Time Complexity:** `O(N)`, since we traverse the BST once (`O(N)`) and use a two-pointer approach (`O(N)`).
- **Space Complexity:** `O(N)`, as we store the inorder traversal in an array.

### **Approach 2: Using HashSet (Optimized Space Complexity)**

Instead of storing the entire inorder traversal, we use a **HashSet** to track visited node values.

1. Perform a **DFS traversal**.
2. For each node, check if `target - node.val` is already in the set.
   - If yes, return `True`.
   - Otherwise, add `node.val` to the set and continue.
3. If no pair is found, return `False`.

#### **Time & Space Complexity:**

- **Time Complexity:** `O(N)`, since we visit each node once.
- **Space Complexity:** `O(H)`, where `H` is the height of the tree (worst case `O(N)`, best case `O(log N)`).

### **Key Takeaways:**

âœ” **Approach 1 (Inorder + Two Pointers):** Simple and efficient but requires `O(N)` space.  
âœ” **Approach 2 (DFS + HashSet):** Optimized space complexity using `O(H)`.  
âœ” **Handles Large Constraints (`10^5` Nodes)** with `O(N)` complexity.

Would you like a **dry run** for better understanding? ðŸš€
