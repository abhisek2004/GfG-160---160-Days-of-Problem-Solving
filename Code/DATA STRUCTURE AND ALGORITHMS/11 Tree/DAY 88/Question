### Check for BST

**Difficulty:** Easy  
**Accuracy:** 25.37%  
**Submissions:** 559K+  
**Points:** 2  
**Average Time:** 30m

#### Given:

The root of a binary tree. Check whether it is a **Binary Search Tree (BST)** or not.

**Note:** BSTs cannot contain duplicate nodes.

#### A BST is defined as follows:

1. The left subtree of a node contains only nodes with keys **less** than the node's key.
2. The right subtree of a node contains only nodes with keys **greater** than the node's key.
3. Both the left and right subtrees must also be **binary search trees**.

#### Examples:

**Input:** `root = [2, 1, 3, N, N, N, 5]`  
**Output:** `true`  
**Explanation:** The left subtree of every node contains smaller keys and the right subtree contains greater keys. Hence, it is a BST.

---

**Input:** `root = [2, N, 7, N, 6, N, 9]`  
**Output:** `false`  
**Explanation:** The node to the right of 7 has a smaller key (6), violating the BST property.

---

**Input:** `root = [10, 5, 20, N, N, 9, 25]`  
**Output:** `false`  
**Explanation:** The node with key 9 in the right subtree is smaller than the root (10), violating the BST property.

#### Constraints:

- \(1 \leq \) number of nodes \( \leq 10^5\)
- \(1 \leq \) node value \( \leq 10^9\)
