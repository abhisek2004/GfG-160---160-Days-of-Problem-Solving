This is a **classic stack-based problem** where you need to evaluate a mathematical expression in **Postfix Notation (Reverse Polish Notation)**.

---

## üîî **Key Observations**

- **Postfix Notation** means operators come **after** their operands.
- Use a **stack** to hold operands.
- Whenever you encounter an operator, **pop the top two elements from the stack, apply the operator, and push the result back onto the stack**.
- Division ( `/` ) should follow integer division rules: truncate towards zero.

---

## üîë **Approach**

1. **Iterate through `arr`**.
2. **If the element is an operand (integer)**, push it onto the stack.
3. **If the element is an operator**, pop the top two elements (right and left operands), apply the operator, and push the result.
4. At the end, the stack will contain exactly **one element**, which is the result.

---

## ‚ö†Ô∏è **Division in Python (towards zero)**

Python's default integer division using `//` does **floor division**, meaning it rounds towards negative infinity.  
For this problem, you need to round towards **zero**, which can be done using:

```python
result = int(left / right)  # Division rounded towards zero
```

# Example usage

arr1 = ["2", "3", "1", "*", "+", "9", "-"]
print(evaluatePostfixExpression(arr1)) # Output: -4

arr2 = ["100", "200", "+", "2", "/", "5", "*", "7", "+"]
print(evaluatePostfixExpression(arr2)) # Output: 757

```

---

## üîé **Explanation for Example 1**

Expression:
`2 3 1 * + 9 -`

Steps:

| Stack                    | Action              |
| ------------------------ | ------------------- |
| [2]                      | Push 2              |
| [2, 3]                   | Push 3              |
| [2, 3, 1]                | Push 1              |
| [2, 3]                   | Pop 1 and 3 for `*` |
| [2, 3] ‚Üí [2, 3] ‚Üí [2, 3] | 3 \* 1 = 3          |
| [2, 3] ‚Üí [2+3] = [5]     | Apply `+`           |
| [5, 9]                   | Push 9              |
| [5, 9] ‚Üí [5-9] = [-4]    | Apply `-`           |

**Final result:** `-4`

---

## üíØ **Time Complexity**

- Processing each token takes constant time `O(1)`.
- Overall: **O(n)** where `n = arr.size()`.

## üî≤ **Space Complexity**

- In the worst case, the stack could hold all operands: **O(n)**.

---

## üî• **This is the optimal approach for evaluating postfix expressions.**

Let me know if you want a **C++ or Java version**!
```
