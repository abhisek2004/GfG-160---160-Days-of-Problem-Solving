### Find Median in a Stream

**Difficulty:** Hard  
**Accuracy:** 30.34%  
**Submissions:** 139K+  
**Points:** 8  
**Average Time:** 45m

Given a data stream `arr[]` where integers are read sequentially, the task is to determine the median of the elements encountered so far after each new integer is read.

There are two cases for the median based on the dataset size:

1. If the dataset has an **odd** number of elements, the middle one is the median.
2. If the dataset has an **even** number of elements, the median is the arithmetic mean of the two middle values.

### Examples:

#### **Input 1:**

```
arr[] = [5, 15, 1, 3, 2, 8]
```

#### **Output 1:**

```
[5.0, 10.0, 5.0, 4.0, 3.0, 4.0]
```

#### **Explanation:**

- After reading 1st element – **5** → median = `5.0`
- After reading 2nd element – **5, 15** → median = `(5+15)/2 = 10.0`
- After reading 3rd element – **5, 15, 1** → median = `5.0`
- After reading 4th element – **5, 15, 1, 3** → median = `(3+5)/2 = 4.0`
- After reading 5th element – **5, 15, 1, 3, 2** → median = `3.0`
- After reading 6th element – **5, 15, 1, 3, 2, 8** → median = `(3+5)/2 = 4.0`

#### **Input 2:**

```
arr[] = [2, 2, 2, 2]
```

#### **Output 2:**

```
[2.0, 2.0, 2.0, 2.0]
```

#### **Explanation:**

- After reading 1st element – **2** → median = `2.0`
- After reading 2nd element – **2, 2** → median = `(2+2)/2 = 2.0`
- After reading 3rd element – **2, 2, 2** → median = `2.0`
- After reading 4th element – **2, 2, 2, 2** → median = `(2+2)/2 = 2.0`

### **Constraints:**

- `1 <= arr.size() <= 10^5`
- `1 <= x <= 10^6`
