Rotate Square Matrix by 90 Degrees Counterclockwise

Given a n\*n square matrix mat[][], rotate it by 90 degrees in counterclockwise direction without using any extra space.

Examples:

Input: mat[][] = [[1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]]
Output: [[3, 6, 9], 
                [2, 5, 8], 
                [1, 4, 7]]

Input: mat[][] = [[1, 2,  3, 4],
            [5, 6, 7,  8], 
              [9, 10, 11, 12],
              [13, 14, 15, 16]]
Output: [[4, 8, 12, 16], 
              [3, 7, 11, 15],
              [2, 6, 10, 14],
              [1, 5, 9, 13]]

Table of Content

[Naive Approach] Using Extra Space - O(n^2) Time and O(n^2) Space
[Expected Approach 1] Forming Cycles - O(n^2) Time and O(1) Space
[Expected Approach 2] Reversing Rows and Transposing - O(n^2) Time and O(1) Space
[Naive Approach] Using Extra Space - O(n^2) Time and O(n^2) Space
We mainly need to move first row elements to first column in reverse order, second row elements to second column in reverse order and so on.

Let us first try to find out a pattern to solve the problem for n = 4 (second example matrix above)

mat[0][0] goes to mat[3][0]
mat[0][1] goes to mat[2][0]
mat[1][0] goes to mat[3][1]
mat[3][3] goes to mat[0][3]
Do you see a pattern? Mainly we need to move mat[i][j] to mat[n-j-1][i]. We first move elements in a temporary matrix, then copy the temporary to the original. If we directly copy elements within the matrix, it would cause data loss.
