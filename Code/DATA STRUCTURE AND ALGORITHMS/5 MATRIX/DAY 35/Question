## Spirally Traversing a Matrix

### Problem Statement:

You are given a rectangular matrix `mat[][]` of size `n x m`, and your task is to return an array while traversing the matrix in spiral form.

### Function Signature:

```python
def spiral_traverse(mat: List[List[int]]) -> List[int]:
    # Function to traverse the matrix in spiral form
```

### Input:

- A 2D integer array `mat[][]` of size `n x m`, where `1 <= n, m <= 1000`.
- The elements of the matrix will be between `0` and `100` inclusive.

### Output:

- Return an array of integers containing the elements of the matrix traversed in spiral order.

### Constraints:

- `1 <= n, m <= 1000`
- `0 <= mat[i][j] <= 100`

### Example Walkthrough:

**Example 1:**

```python
mat = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12],
    [13, 14, 15, 16]
]
```

- **Output:** `[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]`
- Explanation: The elements of the matrix are traversed in a spiral form starting from the top-left corner and proceeding clockwise.

**Example 2:**

```python
mat = [
    [1, 2, 3, 4, 5, 6],
    [7, 8, 9, 10, 11, 12],
    [13, 14, 15, 16, 17, 18]
]
```

- **Output:** `[1, 2, 3, 4, 5, 6, 12, 18, 17, 16, 15, 14, 13, 7, 8, 9, 10, 11]`
- Explanation: The matrix is traversed in a spiral pattern starting from the top-left corner and moving clockwise, following the same logic as in Example 1.

**Example 3:**

```python
mat = [
    [32, 44, 27, 23],
    [54, 28, 50, 62]
]
```

- **Output:** `[32, 44, 27, 23, 62, 50, 28, 54]`
- Explanation: The matrix is a smaller 2x4 matrix, and the elements are traversed in a spiral order.

### Note:

- The traversal begins from the top-left corner of the matrix and proceeds in a clockwise direction, moving across rows, then down columns, then back across rows, and then up columns, repeating the process until all elements are visited.
