### **Problem: Remove Loop in Linked List**

**Difficulty:** Medium  
**Accuracy:** 27.66%  
**Submissions:** 492K+  
**Points:** 4

---

### **Problem Statement:**

You are given the `head` of a singly linked list that may contain a loop. A **loop** exists if the last node of the linked list is connected back to a previous node in the list.  
The task is to remove the loop from the linked list (if it exists). After removing the loop, the linked list should not contain any cycles.

---

### **Input Format:**

- `head`: The head of a singly linked list.
- An integer `pos` (1-based index), which denotes the position of the node to which the last node points.
  - If `pos = 0`, it means the last node points to `null`, indicating there is no loop.

---

### **Output Format:**

- The generated output will be `true` if the loop is successfully removed or if no loop exists.
- The output will be `false` if the nodes in the linked list are altered incorrectly.

---

### **Examples:**

#### Example 1:

**Input:**  
`head: 1 -> 3 -> 4`, `pos = 2`

**Output:**  
`true`

**Explanation:**  
A loop is present in the list, and it is removed successfully.

---

#### Example 2:

**Input:**  
`head: 1 -> 8 -> 3 -> 4`, `pos = 0`

**Output:**  
`true`

**Explanation:**  
There is no loop in the given linked list.

---

#### Example 3:

**Input:**  
`head: 1 -> 2 -> 3 -> 4`, `pos = 1`

**Output:**  
`true`

**Explanation:**  
A loop is present in the list, and it is removed successfully.

---

### **Constraints:**

- `1 ≤ size of linked list ≤ 10^5`
- `1 ≤ node->data ≤ 10^3`
- `0 ≤ pos ≤ Number of nodes in the Linked List`

---

### **Steps to Solve the Problem:**

1. Detect if a loop exists in the linked list using Floyd’s Cycle Detection Algorithm (Tortoise and Hare).
2. If a loop exists, find the node where the loop starts.
3. Break the loop by pointing the last node of the loop to `null`.
4. If no loop exists, return `true` as the list is already free of cycles.
