### **Merge Two Sorted Linked Lists**

**Difficulty**: Medium  
**Accuracy**: 62.91%  
**Submissions**: 164K+  
**Points**: 4

---

### **Problem Statement**

You are given the heads of two sorted linked lists. The task is to merge these two sorted linked lists into one sorted linked list and return the head of the merged list.

---

### **Examples**

#### Example 1

**Input**:  
`head1 = 5 -> 10 -> 15 -> 40`  
`head2 = 2 -> 3 -> 20`

**Output**:  
`2 -> 3 -> 5 -> 10 -> 15 -> 20 -> 40`

---

#### Example 2

**Input**:  
`head1 = 1 -> 1`  
`head2 = 2 -> 4`

**Output**:  
`1 -> 1 -> 2 -> 4`

---

### **Constraints**

- \(1 \leq \text{no. of nodes} \leq 10^3\)
- \(0 \leq \text{node->data} \leq 10^5\)

---

### **Approach**

1. **Recursive or Iterative Merge**:

   - Use a **dummy node** technique to simplify the merging process.
   - Traverse both linked lists, comparing the current nodes of both lists.
   - Append the smaller node to the merged list and advance the corresponding pointer.
   - Continue until one list is exhausted, then append the remaining part of the other list.

2. **Iterative Merge Process** (simpler to implement than recursion for large constraints).

3. **Time Complexity**: O(n + m), where n and m are the lengths of the two lists.
4. **Space Complexity**: O(1) for iterative, O(n + m) for recursive.
