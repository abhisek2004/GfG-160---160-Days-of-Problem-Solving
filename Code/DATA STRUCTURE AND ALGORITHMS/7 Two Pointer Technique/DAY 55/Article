Count Possible Triangles

Given an unsorted array of positive integers, the task is to find the number of triangles that can be formed with three different array elements as three sides of triangles.

For a triangle to be possible from 3 values as sides, the sum of the two values (or sides) must always be greater than the third value (or third side).

Examples:

Input: arr[] = [4, 6, 3, 7]
Output: 3
Explanation: There are three triangles possible [3, 4, 6], [4, 6, 7] and [3, 6, 7].
Note that [3, 4, 7] is not a possible triangle.

Input: arr[] = [10, 21, 22, 100, 101, 200, 300]
Output: 6
Explanation: There can be 6 possible triangles:
[10, 21, 22], [21, 100, 101], [22, 100, 101], [10, 100, 101], [100, 101, 200] and [101, 200, 300]

Input: arr[] = [1, 2, 3]
Output: 0
Examples: No triangles are possible.

Table of Content

[Naive Approach] Checking all Triplets - O(n^3) Time and O(1) Space
[Better Approach] Using Binary Search - O((n^2)\*log n) Time and O(1) Space
[Expected Approach] Using Two Pointer - O(n^2) Time and O(1) Space
[Naive Approach] Checking all Triplets - O(n^3) Time and O(1) Space
A simple approach is to run three nested loops that select three different values from an array. And in the innermost loop, we checks for the triangle property which specifies the sum of any two sides must be greater than the value of the third side.
