2 Sum - Pair Sum Closest to Target

Given an array arr[] of n integers and an integer target, the task is to find a pair in arr[] such that itâ€™s sum is closest to target.

Note: Return the pair in sorted order and if there are multiple such pairs return the pair with maximum absolute difference. If no such pair exists return an empty array.

Examples:

Input: arr[] = [10, 30, 20, 5], target = 25
Output: [5, 20]
Explanation: Out of all the pairs, [22, 30] has sum = 25 which is closest to 25.

Input: arr[] = [5, 2, 7, 1, 4], target = 10
Output: [2, 7]
Explanation: As (4, 7) and (2, 7) both are closest to 10, but absolute difference of (2, 7) is 5 and (4, 7) is 3. Hence,[2, 7] has maximum absolute difference and closest to target.

Input: arr[] = [10], target = 10
Output: []
Explanation: As the input array has only 1 element, return an empty array.

Table of Content

[Naive Approach] Explore all possible pairs - O(n^2) Time and O(1) Space
[Better Approach] Binary Search - O(2*nlogn) Time and O(1) Space
[Expected Approach] Two Pointer Technique - O(nlogn+n) Time and O(1) Space
[Naive Approach] Explore all possible pairs - O(n^2) Time and O(1) Space
A simple solution is to consider every pair and keep track of the closest pair (the absolute difference between pair sum and target is minimum). If two pairs are equally close to target then pick the one where the elements are farther apart (i.e., have the largest difference between them). Finally, print the closest pair.