### **Longest Subarray with Sum K**

**Difficulty**: Medium  
**Accuracy**: 24.64%  
**Submissions**: 544K+  
**Points**: 4

---

### **Problem Statement**

Given an array `arr[]` of integers and an integer `k`, your task is to find the length of the **longest subarray** whose elements sum to the given value `k`. If no such subarray exists, return `0`.

---

### **Examples**

#### Example 1

**Input**:  
`arr[] = [10, 5, 2, 7, 1, -10]`  
`k = 15`  
**Output**:  
`6`  
**Explanation**:  
Subarrays with sum = 15 are `[5, 2, 7, 1]`, `[10, 5]`, and `[10, 5, 2, 7, 1, -10]`. The length of the longest subarray with sum 15 is `6`.

---

#### Example 2

**Input**:  
`arr[] = [-5, 8, -14, 2, 4, 12]`  
`k = -5`  
**Output**:  
`5`  
**Explanation**:  
The only subarray with sum = -5 is `[-5, 8, -14, 2, 4]`, and its length is `5`.

---

#### Example 3

**Input**:  
`arr[] = [10, -10, 20, 30]`  
`k = 5`  
**Output**:  
`0`  
**Explanation**:  
There is no subarray with sum equal to `5`.

---

### **Constraints**

- \(1 \leq arr.size() \leq 10^5\)
- \(-10^4 \leq arr[i] \leq 10^4\)
- \(-10^9 \leq k \leq 10^9\)

---

### **Approach**

1. Use a **prefix sum** approach with a **hash map** to track the earliest occurrence of each sum.
2. Maintain a running sum and check if `(running_sum - k)` has been seen before. If so, the subarray from that point to the current index has a sum of `k`.
3. Store the length of such subarrays and return the maximum length found.
4. Time complexity is **O(n)** due to the single pass through the array, and space complexity is **O(n)** for the hash map.
