Container with Most Water

Given an array arr[] of non-negative integers, where each element arr[i] represents the height of the vertical lines, find the maximum amount of water that can be contained between any two lines, together with the x-axis.

Examples :  

Input: arr[] = [1, 5, 4, 3]
Output: 6
Explanation: 5 and 3 are 2 distance apart. So the size of the base = 2. Height of container = min(5, 3) = 3. So total area = 3 * 2 = 6.

Input: arr[] = [3, 1, 2, 4, 5]
Output: 12
Explanation: 5 and 3 are distance 4 apart. So the size of the base = 4. Height of container = min(5, 3) = 3. So total area = 4 * 3 = 12.

Input: arr[] = [2, 1, 8, 6, 4, 6, 5, 5]
Output: 25
Explanation: 8 and 5 are 5 distance apart. So the size of the base = 5. Height of container = min(8, 5) = 5. So, total area = 5 * 5 = 12.

Table of Content

[Naive Approach] Finding all possible boundaries - O(n^2) Time and O(1) Space
[Expected Approach] Using Two Pointers - O(n) Time and O(1) Space
[Naive Approach] Finding all possible boundaries - O(n^2) Time and O(1) Space
The idea is to iterate over all pair of lines in the array. For each line arr[i], consider it as the left boundary and then iterate over all subsequent lines arr[j] (j > i) to consider them as them as the right boundary. For each pair of boundaries, calculate the water that can be contained between them by the formula min(arr[i], arr[j]) * (j - i). The result will be the maximum amount of water found across all pairs.