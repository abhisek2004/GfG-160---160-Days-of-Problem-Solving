### **Problem Statement**: Insert Interval

**Difficulty**: Medium  
**Accuracy**: 41.57%  
**Submissions**: 7K+  
**Points**: 4

---

Geek has an array of non-overlapping intervals `intervals`, where each interval is represented by `[starti, endi]`. These intervals are sorted in ascending order by their start time (`starti`). Geek wants to insert a new interval `newInterval = [newStart, newEnd]` into the array such that the array remains sorted by start time and does not contain any overlapping intervals. If necessary, merge the overlapping intervals.

---

### **Function Signature**:

```python
def insert_interval(intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
    pass
```

---

### **Input**:

- `intervals` (1 ≤ `intervals.size()` ≤ 10^5): A list of `n` intervals, each interval represented by a list of two integers `[starti, endi]`, where `0 ≤ start[i], end[i] ≤ 10^9`. The intervals are sorted in ascending order by their start time.
- `newInterval`: A list of two integers `[newStart, newEnd]`, where `0 ≤ newStart, newEnd ≤ 10^9`.

### **Output**:

- Return the list of intervals after inserting and merging the new interval, ensuring that the list remains sorted by start time, and there are no overlapping intervals.

---

### **Examples**:

#### Example 1:

**Input**:

```python
intervals = [[1, 3], [4, 5], [6, 7], [8, 10]]
newInterval = [5, 6]
```

**Output**:

```python
[[1, 3], [4, 7], [8, 10]]
```

**Explanation**: The new interval `[5, 6]` overlaps with `[4, 5]` and `[6, 7]`, so they are merged into `[4, 7]`.

---

#### Example 2:

**Input**:

```python
intervals = [[1, 2], [3, 5], [6, 7], [8, 10], [12, 16]]
newInterval = [4, 9]
```

**Output**:

```python
[[1, 2], [3, 10], [12, 16]]
```

**Explanation**: The new interval `[4, 9]` overlaps with `[3, 5]`, `[6, 7]`, and `[8, 10]`. These intervals are merged into `[3, 10]`.

---

### **Constraints**:

- `1 ≤ intervals.size() ≤ 10^5`
- `0 ≤ start[i], end[i] ≤ 10^9`

### **Note**:

- The input intervals are sorted in ascending order by their start times.
- The output list should also be sorted in ascending order by the start times of the intervals.

---

### **Goal**:

Implement the `insert_interval` function to insert the `newInterval` into the `intervals` list while maintaining the sorted order and merging any overlapping intervals.

---

### **Hints**:

- You can use a two-pointer approach to solve this problem efficiently.
- Make sure to handle the edge cases where the new interval is placed at the beginning, middle, or end of the list, and when it overlaps with multiple intervals.

---

Good luck with solving this challenge!
