**Non-overlapping Intervals**

**Difficulty**: Medium  
**Accuracy**: 53.92%  
**Submissions**: 7K+  
**Points**: 4

### Problem Statement:

Given a 2D array `intervals[][]` representing intervals where `intervals[i] = [starti, endi]`, return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

### Example 1:

**Input**:

```plaintext
intervals = [[1, 2], [2, 3], [3, 4], [1, 3]]
```

**Output**:

```plaintext
1
```

**Explanation**: Remove the interval `[1, 3]` and the remaining intervals are non-overlapping.

### Example 2:

**Input**:

```plaintext
intervals = [[1, 3], [1, 3], [1, 3]]
```

**Output**:

```plaintext
2
```

**Explanation**: You need to remove two intervals `[1, 3]` to make the rest non-overlapping.

### Example 3:

**Input**:

```plaintext
intervals = [[1, 2], [5, 10], [18, 35], [40, 45]]
```

**Output**:

```plaintext
0
```

**Explanation**: All intervals are already non-overlapping.

### Constraints:

- `1 ≤ intervals.size() ≤ 10^5`
- `|intervals[i]| == 2`
- `0 ≤ starti < endi ≤ 5 * 10^4`

### Function Signature:

```python
def eraseOverlapIntervals(intervals: List[List[int]]) -> int:
    pass
```

### Problem Description:

In this problem, you are asked to minimize the number of intervals to remove so that the remaining intervals do not overlap. The solution involves finding the minimum number of deletions to ensure all intervals are non-overlapping.

You may need to consider sorting the intervals or using greedy techniques to optimize your solution.
