### Problem: Overlapping Intervals

#### Difficulty: Medium

#### Accuracy: 57.41%

#### Submissions: 70K+

#### Points: 4

### Problem Statement:

Given an array of intervals `arr[][]`, where each interval is represented by `[starti, endi]`, merge all of the overlapping intervals and return the resulting list of merged intervals.

### Input:

- An array `arr[][]` of size `n`, where each element is an interval represented by two integers `[starti, endi]` such that `0 ≤ starti ≤ endi ≤ 10^5`.

### Output:

- A list of merged intervals, where no two intervals overlap. The output should be sorted by the start times of the intervals.

### Example 1:

**Input:**

```python
arr = [[1, 3], [2, 4], [6, 8], [9, 10]]
```

**Output:**

```python
[[1, 4], [6, 8], [9, 10]]
```

**Explanation:**
In the given intervals, `[1, 3]` and `[2, 4]` overlap and should be merged into `[1, 4]`. The other intervals do not overlap, so they are returned as is.

### Example 2:

**Input:**

```python
arr = [[6, 8], [1, 9], [2, 4], [4, 7]]
```

**Output:**

```python
[[1, 9]]
```

**Explanation:**
In this case, all intervals overlap with `[1, 9]`, so they are merged into `[1, 9]`.

### Constraints:

- `1 ≤ arr.size() ≤ 10^5`
- `0 ≤ starti ≤ endi ≤ 10^5`

### Task:

Implement a function to merge all overlapping intervals in the given array and return the merged intervals.

---

### Notes:

- Sort the intervals by their start time before attempting to merge.
- Use a greedy approach to merge overlapping intervals as you iterate through the sorted list.
