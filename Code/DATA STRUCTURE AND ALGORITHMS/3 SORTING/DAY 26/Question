## Approach

We can merge two sorted arrays `a[]` and `b[]` in-place by performing the following steps:

1. **Iterate through the arrays** and move the smaller elements to their respective positions in `a[]` and `b[]`.
2. **Perform a two-pointer technique**:
   - Start from the last elements of both arrays.
   - Compare the current elements and swap them if necessary.
3. Continue shifting elements while maintaining the order in both arrays.

# Example Input 1

a = [2, 4, 7, 10]
b = [2, 3]
mergeWithoutExtraSpace(a, b) # Output: 2 2 3 4 7 10, []

# Example Input 2

a = [1, 5, 9, 10, 15, 20]
b = [2, 3, 8, 13]
mergeWithoutExtraSpace(a, b) # Output: 1 2 3 5 8 9, 10 13 15 20

# Example Input 3

a = [0, 1]
b = [2, 3]
mergeWithoutExtraSpace(a, b) # Output: 0 1, 2 3

````

## Explanation:

1. **While loop**: This loop runs as long as `i >= 0` and `j < m`, comparing elements `a[i]` and `b[j]`. If the current element in `a[]` is greater than the current element in `b[]`, we swap them. This continues until we have no more swaps to make.
2. **Sorting**: Once the in-place swapping is done, we use the built-in `sort()` method to ensure both arrays are sorted because the original approach can only ensure some elements are in place but not the whole array.

3. **Printing the result**: The final merged result in `a[]` and `b[]` is printed.

## Example Walkthrough:

### Input:

```python
a = [2, 4, 7, 10]
b = [2, 3]
````

- Start with `i = 3` and `j = 0`.
- Compare `a[i] = 10` and `b[j] = 2`. Since `10 > 2`, swap them. Now `a = [2, 4, 7, 2]` and `b = [10, 3]`.
- Move to `i = 2` and `j = 1`. Compare `a[i] = 7` and `b[j] = 3`. Since `7 > 3`, swap them. Now `a = [2, 4, 3, 2]` and `b = [10, 7]`.
- Move to `i = 1` and `j = 2`. Compare `a[i] = 4` and `b[j] = 10`. No swap needed.

Now, sort both arrays:

- `a = [2, 2, 3, 4]`
- `b = [7, 10]`

### Output:

```python
2 2 3 4
7 10
```

## Time Complexity:

- The time complexity is O(n log n + m log m) because we perform sorting on both arrays after the in-place swapping.
