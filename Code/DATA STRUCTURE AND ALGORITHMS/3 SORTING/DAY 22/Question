### Count Inversions

**Difficulty**: Medium  
**Accuracy**: 16.93%  
**Submissions**: 588K+  
**Points**: 4

#### Problem Statement:

Given an array of integers `arr[]`, find the **Inversion Count** in the array. Two elements `arr[i]` and `arr[j]` form an inversion if `arr[i] > arr[j]` and `i < j`.

**Inversion Count**: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted, the inversion count is 0. If the array is sorted in reverse order, the inversion count is the maximum.

#### Example 1:

**Input**: `arr[] = [2, 4, 1, 3, 5]`  
**Output**: `3`  
**Explanation**: The sequence has three inversions: (2, 1), (4, 1), (4, 3).

#### Example 2:

**Input**: `arr[] = [2, 3, 4, 5, 6]`  
**Output**: `0`  
**Explanation**: As the sequence is already sorted, there is no inversion.

#### Example 3:

**Input**: `arr[] = [10, 10, 10]`  
**Output**: `0`  
**Explanation**: As all the elements of the array are the same, there is no inversion.

#### Constraints:

- `1 â‰¤ arr.size() â‰¤ 10^5`
- `1 â‰¤ arr[i] â‰¤ 10^4`

### Task:

Implement a function to count the number of inversions in the given array.

---

### Notes:

- An inversion is counted when `arr[i] > arr[j]` and `i < j`.
- A brute force solution would take O(n^2) time, which would be inefficient for large arrays.
- A more optimal approach involves using **Merge Sort** or a **Binary Indexed Tree** to count inversions in O(n log n) time.
