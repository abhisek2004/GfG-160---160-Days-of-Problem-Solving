### **Get Min from Stack**

**Difficulty:** Medium  
**Accuracy:** 22.59%  
**Submissions:** 276K+  
**Points:** 4

---

### **Problem Statement**

You are given `q` queries. Implement a **stack** that supports the following operations in constant time (`O(1)`):

- **push(x)** â€“ Insert an integer `x` onto the stack.
- **pop()** â€“ Remove the top element from the stack.
- **peek()** â€“ Return the top element from the stack. If the stack is empty, return `-1`.
- **getMin()** â€“ Retrieve the **minimum element** from the stack in **O(1)** time. If the stack is empty, return `-1`.

---

### **Query Formats**

Each query is one of the following:

- `1 x` : Push `x` onto the stack.
- `2` : Pop the top element from the stack.
- `3` : Return the **top element** from the stack. If the stack is empty, return `-1`.
- `4` : Return the **minimum element** in the stack. If the stack is empty, return `-1`.

---

### **Example 1**

#### **Input:**

```
q = 7
queries = [[1, 2], [1, 3], [3], [2], [4], [1, 1], [4]]
```

#### **Output:**

```
[3, 2, 1]
```

#### **Explanation:**

- `push(2)` â†’ Stack: [2]
- `push(3)` â†’ Stack: [2, 3]
- `peek()` â†’ Top = 3
- `pop()` â†’ Stack: [2]
- `getMin()` â†’ Min = 2
- `push(1)` â†’ Stack: [2, 1]
- `getMin()` â†’ Min = 1

---

### **Example 2**

#### **Input:**

```
q = 4
queries = [[1, 4], [1, 2], [4], [3]]
```

#### **Output:**

```
[2, 2]
```

#### **Explanation:**

- `push(4)` â†’ Stack: [4]
- `push(2)` â†’ Stack: [4, 2]
- `getMin()` â†’ Min = 2
- `peek()` â†’ Top = 2

---

### **Constraints**

- `1 <= q <= 10^5`
- `0 <= values on the stack <= 10^9`

---

## ðŸ’¡ **Efficient Approach - Use a Support Min Stack**

To support `getMin()` in **O(1)** time, we maintain **two stacks**:

- **Main Stack**: Stores all elements (normal stack operations)
- **Min Stack**: Tracks the **minimum element** at each step

### **Logic**

- When pushing a new element `x`, push `x` to `mainStack`.
- If `minStack` is empty or `x` is less than or equal to the top of `minStack`, also push `x` onto `minStack`.
- When popping an element, if the element being popped is the same as the top of `minStack`, pop from `minStack` as well.
- `getMin()` returns the top of `minStack` (current minimum).

# Example usage

q = 7
queries = [[1, 2], [1, 3], [3], [2], [4], [1, 1], [4]]
print(processQueries(q, queries))

```

### **Output**

```

[3, 2, 1]

```

---

### **Time Complexity**

- `push()`: **O(1)**
- `pop()`: **O(1)**
- `peek()`: **O(1)**
- `getMin()`: **O(1)**

### **Space Complexity**

- **O(n)** for storing stack and minStack.

---

### **This approach guarantees O(1) operations for all required functions.**

Let me know if you want the **C++ or Java version** as well!
```
