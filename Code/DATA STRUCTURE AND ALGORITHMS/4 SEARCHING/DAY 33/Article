Aggressive Cows

Given an array stalls[] which denotes the position of a stall and an integer k which denotes the number of aggressive cows. The task is to assign stalls to k cows such that the minimum distance between any two of them is the maximum possible.

Examples:

Input: stalls[] = [1, 2, 4, 8, 9], k = 3
Output: 3
Explanation: We can place cow 1 at position 1, cow 2 at position 4 and cow 3 at position 9. So, the maximum possible minimum distance between two cows is 3.

Input: stalls[] = [6, 7, 9, 11, 13, 15], k = 4
Output: 2
Explanation: We can place cow 1 at position 6, cow 2 at position 9, cow 3 at position 11 and cow 4 at position 15. So, the maximum possible minimum distance between two cows is 2.

Table of Content

[Naive Approach] By iterating over all possible distances
[Expected Approach] Using Binary Search
[Naive Approach] By iterating over all possible distances
The idea is to iterate over all possible distances starting from 1 up to the difference between the farthest stalls. First, we sort the array to ensure the stalls are in the correct sequence. Then, for each distance, we try to place the cows greedily - placing the first cow in the first stall and the next ones only if the gap from the last placed cow is at least the current distance. If all cows can be placed for a certain distance, we update our result. The process continues until all distances are checked.
