### **LFU Cache**

**Difficulty:** Hard  
**Accuracy:** 58.51%  
**Submissions:** 2K+  
**Points:** 8

#### **Problem Statement:**

Design and implement an **LFU (Least Frequently Used) cache**. Here, `cap` denotes the capacity of the cache and `Q` denotes the number of queries. Queries can be of two types:

1. `GET(x)`: Retrieve the value associated with `x` if it exists; otherwise, return `-1`.
2. `PUT(x, y)`: Insert or update the key `x` with value `y`. If the cache has reached its capacity, remove the **least frequently used** (LFU) key. If multiple keys have the same frequency, the **least recently used** (LRU) key among them should be removed.

---

#### **Operations:**

- `LFUCache(cap)`: Initializes the cache with the given capacity.
- `get(key)`: Returns the value of the key if present, otherwise returns `-1`.
- `put(key, value)`: Inserts or updates the key with the given value. If the cache reaches capacity, the LFU key is removed. In case of a tie, the LRU key is removed.

---

#### **Examples:**

##### **Example 1:**

**Input:**

```
cap = 2, Q = 9
Queries = [["PUT", 1, 1], ["PUT", 2, 2], ["GET", 1], ["PUT", 3, 3],
           ["GET", 2], ["PUT", 4, 4], ["GET", 3], ["GET", 4], ["PUT", 5, 5]]
```

**Output:**

```
[1, -1, -1, 4]
```

**Explanation:**

- `["PUT", 1, 1]`: Inserts key `1` with value `1`.
- `["PUT", 2, 2]`: Inserts key `2` with value `2`.
- `["GET", 1]`: Retrieves value `1`, increasing its frequency to `2`.
- `["PUT", 3, 3]`: Evicts key `2` (LFU) and inserts key `3`.
- `["GET", 2]`: Returns `-1` (key `2` not found).
- `["PUT", 4, 4]`: Evicts key `3` (LFU) and inserts key `4`.
- `["GET", 3]`: Returns `-1` (key `3` not found).
- `["GET", 4]`: Retrieves value `4`, increasing its frequency to `2`.
- `["PUT", 5, 5]`: Evicts key `1` (ties with key `4`, but `1` is LRU), inserts key `5`.

---

##### **Example 2:**

**Input:**

```
cap = 3, Q = 10
Queries = [["PUT", 5, 7], ["PUT", 4, 6], ["PUT", 3, 5], ["PUT", 2, 4],
           ["PUT", 1, 3], ["GET", 1], ["GET", 2], ["GET", 3], ["GET", 4], ["GET", 5]]
```

**Output:**

```
[3, 4, 5, -1, -1]
```

**Explanation:**

- `["PUT", 2, 4]`: Evicts `(5,7)` as it is the **LFU**.
- `["PUT", 1, 3]`: Evicts `(4,6)`.
- After all operations, the cache contains keys `{1, 2, 3}`.

---

#### **Constraints:**

- `0 ≤ cap ≤ 10⁴`
- `0 ≤ key ≤ 10⁵`
- `0 ≤ value ≤ 10⁶`
- **Up to** `2×10⁵` **calls** will be made to `get` and `put`.
