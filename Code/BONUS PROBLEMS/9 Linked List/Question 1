### **Intersection in Y Shaped Lists**

**Difficulty:** Medium  
**Accuracy:** 44.67%  
**Submissions:** 296K+  
**Points:** 4

#### **Problem Statement:**

Given the head of two singly linked lists, return the point where these two linked lists intersect.

**Note:** It is guaranteed that the intersected node always exists.

#### **Custom Input Format:**

- `head1` contains the nodes before intersection in `list1`.
- `head2` contains the nodes before intersection in `list2`.
- `CommonList` contains the nodes after intersection of `list1` and `list2`.

#### **Examples:**

##### **Example 1:**

**Input:**  
`head1` : 4 → 4 → 4 → 4 → 4  
`head2` : 4 → 4 → 4

**Output:**  
`4`

**Explanation:**  
From the given lists, the common part is `4 → 4`, whose starting point is `4`.

---

##### **Example 2:**

**Input:**  
`head1` : 4 → 1 → 8 → 4 → 5  
`head2` : 5 → 6 → 1 → 8 → 4 → 5

**Output:**  
`8`

**Explanation:**  
From the given lists, the common part is `8 → 4 → 5`, whose starting point is `8`.

---

#### **Constraints:**

- `2 ≤` total number of nodes `≤ 2 × 10⁵`
- `-10⁴ ≤` node->data `≤ 10⁴`
