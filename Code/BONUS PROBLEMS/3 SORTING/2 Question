# Meeting Rooms

## Problem Statement

You are given a 2D array `arr[][]` where each element `arr[i][0]` represents the start time of the i-th meeting and `arr[i][1]` represents the end time of the i-th meeting. The task is to determine if it is possible for a person to attend all meetings such that they can attend only one meeting at a time. A person can attend a meeting if and only if its starting time is greater than or equal to the ending time of the previous meeting they attended.

### Input:

- A 2D list `arr[][]` of size `n` (where 1 ≤ `n` ≤ 100,000), where each element `arr[i]` is a list containing two integers, representing the start time and end time of the i-th meeting:
  - `arr[i][0]` is the start time of the i-th meeting.
  - `arr[i][1]` is the end time of the i-th meeting.
- The start time and end time are non-negative integers and satisfy the condition: `0 ≤ arr[i][0] ≤ arr[i][1] ≤ 2 * 10^6`.

### Output:

- Return `True` if it is possible for a person to attend all meetings without any overlap.
- Return `False` if it is not possible to attend all meetings because of overlap between two or more meetings.

### Examples:

**Example 1:**

Input:

```python
arr = [[1, 4], [10, 15], [7, 10]]
```

Output:

```python
True
```

Explanation:  
Since all the meetings are held at different times, it is possible to attend all of them.

**Example 2:**

Input:

```python
arr = [[2, 4], [9, 12], [6, 10]]
```

Output:

```python
False
```

Explanation:  
The second and third meetings overlap, so it is not possible to attend all the meetings.

### Constraints:

- \( 1 \leq \text{arr.size()} \leq 10^5 \)
- \( 0 \leq arr[i][0] \leq arr[i][1] \leq 2 \times 10^6 \)

### Task:

Write a function to check if it's possible to attend all meetings without any overlap.

### Function Signature:

```python
def can_attend_meetings(arr: List[List[int]]) -> bool:
    pass
```

### Hint:

- Sort the meetings by their start time (or by their end time) and check if any meeting starts before the previous one ends.

---

You can now implement the function and test it using the provided test cases!
