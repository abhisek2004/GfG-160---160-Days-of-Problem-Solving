### **Subarrays with K Distinct Integers**

**Difficulty**: Medium  
**Accuracy**: 37.78%  
**Submissions**: 8K+  
**Points**: 4

You are given an array `arr[]` of positive integers and an integer `k`. The task is to find the number of subarrays in `arr[]` where the count of distinct integers is exactly `k`.

---

### **Examples**

**Example 1**:  
**Input**:  
`arr[] = [1, 2, 2, 3]`  
`k = 2`  
**Output**:  
`4`  
**Explanation**:  
Subarrays with exactly 2 different integers are:  
`arr[0..1] = [1, 2]`,  
`arr[0..2] = [1, 2, 2]`,  
`arr[1..3] = [2, 2, 3]`,  
`arr[2..3] = [2, 3]`.

---

**Example 2**:  
**Input**:  
`arr[] = [3, 1, 2, 2, 3]`  
`k = 3`  
**Output**:  
`4`  
**Explanation**:  
Subarrays with exactly 3 different integers are:  
`arr[0..2] = [3, 1, 2]`,  
`arr[0..3] = [3, 1, 2, 2]`,  
`arr[0..4] = [3, 1, 2, 2, 3]`,  
`arr[1..4] = [1, 2, 2, 3]`.

---

**Example 3**:  
**Input**:  
`arr[] = [1, 1, 1, 1]`  
`k = 2`  
**Output**:  
`0`  
**Explanation**:  
There are no subarrays with exactly 2 distinct integers.

---

### **Constraints**

- \(1 \leq arr.size() \leq 10^4\)
- \(1 \leq k \leq arr.size()\)
- \(1 \leq arr[i] \leq arr.size()\)

---

### **Approach**

1. **Use Sliding Window Technique with Hash Maps**:  
   We count the number of subarrays with exactly `k` distinct integers by calculating the difference between the number of subarrays with at most `k` distinct integers and those with at most `k - 1` distinct integers.

   Let `count_at_most(k)` be a function that returns the number of subarrays with at most `k` distinct integers. The result for exactly `k` distinct integers is:
   \[
   \text{result} = \text{count_at_most}(k) - \text{count_at_most}(k-1)
   \]

2. **Algorithm for `count_at_most(k)`**:

   - Use two pointers (`left` and `right`) to track the current subarray.
   - Maintain a hash map (or dictionary) to store the frequency of elements in the current subarray.
   - Expand the right pointer and update the map.
   - If the number of distinct elements exceeds `k`, move the left pointer until there are at most `k` distinct elements.
   - Count all valid subarrays ending at the current `right` pointer.

     return count_at_most(k) - count_at_most(k - 1)

   # Example usage:

   arr = [1, 2, 2, 3]
   k = 2
   print(subarrays_with_k_distinct(arr, k)) # Output: 4

   ```

   ```

---

### **Time and Space Complexity**

- **Time Complexity**: \(O(n)\), where \(n\) is the size of the array, as each element is processed at most twice (once when entering the window, once when leaving).
- **Space Complexity**: \(O(k)\), to store the frequency of up to `k` elements in the hash map.
