### Problem: Largest Rectangular Sub-matrix with Sum = 0

**Difficulty:** Hard  
**Accuracy:** 45.28%  
**Submissions:** 37K+  
**Points:** 8

---

### **Problem Statement:**

You are given a 2D matrix `mat[][]` of size `n x m`. The task is to find the **size** (rows × columns) of the largest sub-matrix whose sum equals `0`.

A sub-matrix is any contiguous part of the matrix obtained by selecting some (possibly all) rows and columns.

---

### **Examples:**

#### Example 1:

**Input:**  
`mat[][] = [[9, 7, 16, 5], [1, -6, -7, 3], [1, 8, 7, 9], [7, -2, 0, 10]]`

**Output:**  
`6`

**Explanation:**  
The sub-matrix with a sum of 0 is:

```
[-6, -7]
[ 8,  7]
```

---

#### Example 2:

**Input:**  
`mat[][] = [[1, 2, 3], [-3, -2, -1], [1, 7, 5]]`

**Output:**  
`6`

**Explanation:**  
The sub-matrix with a sum of 0 is:

```
[ 1,  2,  3]
[-3, -2, -1]
```

---

#### Example 3:

**Input:**  
`mat[][] = [[1, -1], [-1, 1]]`

**Output:**  
`4`

**Explanation:**  
The entire matrix forms the largest sub-matrix with sum `0`:

```
[ 1, -1]
[-1,  1]
```

---

### **Constraints:**

- `1 <= mat.size(), mat[0].size() <= 100`
- `-1000 <= mat[i][j] <= 1000`

---

### **Approach:**

#### Key Idea:

We need to find a rectangular sub-matrix where the sum of all elements is `0`. This can be efficiently solved by:

1. **Reducing the 2D problem to multiple 1D subarray problems**.
2. Using the **Kadane’s algorithm for finding subarrays with sum = 0** in each reduced 1D problem.

---

#### Steps:

1. **Iterate over all possible row pairs**:

   - Fix two rows (`top` and `bottom`) of the matrix.

2. **Reduce the matrix to a 1D array**:

   - For each column, compute the cumulative sum between the fixed rows. This converts the matrix into a 1D array representing column sums.

3. **Find the largest subarray with sum = 0** in the 1D array:

   - Use a hash map to track prefix sums. If the prefix sum is repeated, it means the subarray between these indices has sum = 0.

4. **Track the largest rectangle size**:
   - Compute the area of the sub-matrix as `(bottom - top + 1) × (right - left + 1)` and update the maximum area.

---

### **Algorithm Complexity:**

- **Time Complexity**: `O(n^2 * m)`, where `n` = number of rows and `m` = number of columns.
  - Outer loop for selecting row pairs: `O(n^2)`.
  - Inner loop for column traversal: `O(m)`.
  - Kadane's algorithm for subarray sum = 0: `O(m)`.
- **Space Complexity**: `O(m)` for storing column sums and prefix sums.

---

### **Example Walkthrough:**

#### Input:

`mat[][] = [[1, -1], [-1, 1]]`

#### Step 1: Fix row pairs and compute column sums.

- For `top = 0, bottom = 0`:  
  Column sums: `[1, -1]`

- For `top = 0, bottom = 1`:  
  Column sums: `[0, 0]`

- For `top = 1, bottom = 1`:  
  Column sums: `[-1, 1]`

#### Step 2: Find largest subarray with sum = 0.

- For column sums `[0, 0]`, the entire array forms a subarray with sum = 0.

#### Step 3: Compute area.

- For subarray `[0, 0]`, area = `2 × 2 = 4`.

#### Output:

`4`

### **Example Execution:**

#### Input:

`mat = [[1, -1], [-1, 1]]`

#### Output:

`4`

This solution efficiently computes the largest rectangular sub-matrix with sum = 0 in `O(n^2 * m)` time.
